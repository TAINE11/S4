"use strict";

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Không thể gọi một lớp là một hàm");
    }
}

function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}

function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", { writable: false });
    return Constructor;
}

function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter) || iter["@@iterator"]) return Array.from(iter);
}

function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
    }
    return arr2;
}

function _nonIterableSpread() {
    throw new TypeError("Nỗ lực phát tán phiên bản không thể lặp lại không hợp lệ. Để có thể lặp lại, các đối tượng không phải mảng phải có một [Symbol.iterator]() phương pháp.");
}

(function ($) {
    function initPreloader() {
        $(window).on("load", function () {
            $("#status").fadeOut();
            $("#preloader").delay(350).fadeOut("slow");
        });
    }

    function initializeBootstrapComponents() {
        _toConsumableArray(document.querySelectorAll('[data-bs-toggle="popover"]')).map(function (popover) {
            return new bootstrap.Popover(popover);
        });

        _toConsumableArray(document.querySelectorAll('[data-bs-toggle="tooltip"]')).map(function (tooltip) {
            return new bootstrap.Tooltip(tooltip);
        });

        _toConsumableArray(document.querySelectorAll(".offcanvas")).map(function (offcanvas) {
            return new bootstrap.Offcanvas(offcanvas);
        });
    }

    function handleToastPlacement() {
        var toastContainer = document.getElementById("toastPlacement");
        if (toastContainer) {
            document.getElementById("selectToastPlacement").addEventListener("change", function () {
                toastContainer.dataset.originalClass = toastContainer.className;
                toastContainer.className = toastContainer.dataset.originalClass + " " + this.value;
            });
        }

        [].slice.call(document.querySelectorAll(".toast")).map(function (toast) {
            return new bootstrap.Toast(toast);
        });
    }

    function handleAlerts() {
        var alertPlaceholder = document.getElementById("liveAlertPlaceholder");
        var alertTrigger = document.getElementById("liveAlertBtn");

        if (alertTrigger) {
            alertTrigger.addEventListener("click", function () {
                var alertDiv = document.createElement("div");
                alertDiv.innerHTML = [
                    '<div class="alert alert-success alert-dismissible" role="alert">',
                    "   <div>Thật tuyệt, bạn đã kích hoạt thông báo cảnh báo này!</div>",
                    '   <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>',
                    "</div>"
                ].join("");
                alertPlaceholder.append(alertDiv);
            });
        }
    }

    function initSideNav() {
        if ($(".side-nav").length) {
            var easingFn = function (t, b, c, d) {
                return (t /= d / 2) < 1 ? (c / 2 * t * t + b) : (-c / 2 * (--t * (t - 2) - 1) + b);
            };

            var collapseItems = $(".side-nav li .collapse");

            $(".side-nav li [data-bs-toggle='collapse']").on("click", function () {
                return false;
            });

            collapseItems.on({
                "show.bs.collapse": function (e) {
                    var target = $(e.target).parents(".collapse.show");
                    $(".side-nav .collapse.show").not(e.target).not(target).collapse("hide");
                }
            });

            $(".side-nav a").each(function () {
                var currentUrl = window.location.href.split(/[?#]/)[0];
                if (this.href === currentUrl) {
                    $(this).addClass("active")
                        .parent().addClass("menuitem-active")
                        .parent().parent().addClass("show")
                        .parent().addClass("menuitem-active");
                }
            });

            setTimeout(function () {
                var activeItem = document.querySelector("li.menuitem-active .active");
                if (activeItem) {
                    var scrollParent = document.querySelector(".leftside-menu .simplebar-content-wrapper");
                    var offset = activeItem.offsetTop - 300;
                    var scrollDuration = 600;
                    if (scrollParent && offset > 100) {
                        var scrollStep = 20;
                        var currentScroll = scrollParent.scrollTop;
                        var diff = offset - currentScroll;
                        var progress = 0;

                        function smoothScroll() {
                            var position = easingFn(progress += scrollStep, currentScroll, diff, scrollDuration);
                            scrollParent.scrollTop = position;
                            if (progress < scrollDuration) {
                                setTimeout(smoothScroll, 20);
                            }
                        }

                        smoothScroll();
                    }
                }
            }, 200);
        }
    }

    $(document).ready(function () {
        initPreloader();
        initializeBootstrapComponents();
        handleToastPlacement();
        handleAlerts();
        initSideNav();
    });
})(jQuery);
